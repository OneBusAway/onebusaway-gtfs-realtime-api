/**
 * Portions of this module are modifications based on work created and shared by Google:
 *
 *   http://code.google.com/policies.html
 *
 * and used according to terms described in the Creative Commons 3.0 Attribution License:
 *
 *   http://creativecommons.org/licenses/by/3.0/
 *
 * Specifically, the gtfs-realtime.proto:
 *
 *   http://code.google.com/transit/realtime/docs/gtfs-realtime_proto.html
 *
 * was used to generate the classes contained within.
 *
 * Portions of this module are modifications based on work created by the New York
 * City Metropolitan Transportation Authority.
 *
 * All code is Copyright (C) 2011 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/transit/realtime/gtfs-realtime-crowding.proto

package com.google.transit.realtime;

public final class GtfsRealtimeCrowding {
  private GtfsRealtimeCrowding() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registry.add(com.google.transit.realtime.GtfsRealtimeCrowding.crowdingDescriptor);
  }
  public interface CrowdingDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.CrowdingDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 estimated_count = 1;</code>
     *
     * <pre>
     * raw count of passengers onboard vehicle
     * </pre>
     */
    boolean hasEstimatedCount();
    /**
     * <code>optional int32 estimated_count = 1;</code>
     *
     * <pre>
     * raw count of passengers onboard vehicle
     * </pre>
     */
    int getEstimatedCount();

    /**
     * <code>optional int32 estimated_capacity = 2;</code>
     *
     * <pre>
     * estimated capacity of vehicle considering current
     * crowding restrictions
     * </pre>
     */
    boolean hasEstimatedCapacity();
    /**
     * <code>optional int32 estimated_capacity = 2;</code>
     *
     * <pre>
     * estimated capacity of vehicle considering current
     * crowding restrictions
     * </pre>
     */
    int getEstimatedCapacity();
  }
  /**
   * Protobuf type {@code transit_realtime.CrowdingDescriptor}
   *
   * <pre>
   * crowding information in raw form.  This allows
   * for more flexibility then levels and percents.
   * Note that either count or capacity may be missing!!!
   * </pre>
   */
  public static final class CrowdingDescriptor extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:transit_realtime.CrowdingDescriptor)
      CrowdingDescriptorOrBuilder {
    // Use CrowdingDescriptor.newBuilder() to construct.
    private CrowdingDescriptor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CrowdingDescriptor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CrowdingDescriptor defaultInstance;
    public static CrowdingDescriptor getDefaultInstance() {
      return defaultInstance;
    }

    public CrowdingDescriptor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CrowdingDescriptor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              estimatedCount_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              estimatedCapacity_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.transit.realtime.GtfsRealtimeCrowding.internal_static_transit_realtime_CrowdingDescriptor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.transit.realtime.GtfsRealtimeCrowding.internal_static_transit_realtime_CrowdingDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.class, com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.Builder.class);
    }

    public static com.google.protobuf.Parser<CrowdingDescriptor> PARSER =
        new com.google.protobuf.AbstractParser<CrowdingDescriptor>() {
      public CrowdingDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CrowdingDescriptor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CrowdingDescriptor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ESTIMATED_COUNT_FIELD_NUMBER = 1;
    private int estimatedCount_;
    /**
     * <code>optional int32 estimated_count = 1;</code>
     *
     * <pre>
     * raw count of passengers onboard vehicle
     * </pre>
     */
    public boolean hasEstimatedCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 estimated_count = 1;</code>
     *
     * <pre>
     * raw count of passengers onboard vehicle
     * </pre>
     */
    public int getEstimatedCount() {
      return estimatedCount_;
    }

    public static final int ESTIMATED_CAPACITY_FIELD_NUMBER = 2;
    private int estimatedCapacity_;
    /**
     * <code>optional int32 estimated_capacity = 2;</code>
     *
     * <pre>
     * estimated capacity of vehicle considering current
     * crowding restrictions
     * </pre>
     */
    public boolean hasEstimatedCapacity() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 estimated_capacity = 2;</code>
     *
     * <pre>
     * estimated capacity of vehicle considering current
     * crowding restrictions
     * </pre>
     */
    public int getEstimatedCapacity() {
      return estimatedCapacity_;
    }

    private void initFields() {
      estimatedCount_ = 0;
      estimatedCapacity_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, estimatedCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, estimatedCapacity_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, estimatedCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, estimatedCapacity_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code transit_realtime.CrowdingDescriptor}
     *
     * <pre>
     * crowding information in raw form.  This allows
     * for more flexibility then levels and percents.
     * Note that either count or capacity may be missing!!!
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.CrowdingDescriptor)
        com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.transit.realtime.GtfsRealtimeCrowding.internal_static_transit_realtime_CrowdingDescriptor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.transit.realtime.GtfsRealtimeCrowding.internal_static_transit_realtime_CrowdingDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.class, com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.Builder.class);
      }

      // Construct using com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        estimatedCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        estimatedCapacity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.transit.realtime.GtfsRealtimeCrowding.internal_static_transit_realtime_CrowdingDescriptor_descriptor;
      }

      public com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor getDefaultInstanceForType() {
        return com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.getDefaultInstance();
      }

      public com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor build() {
        com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor buildPartial() {
        com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor result = new com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.estimatedCount_ = estimatedCount_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.estimatedCapacity_ = estimatedCapacity_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor) {
          return mergeFrom((com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor other) {
        if (other == com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.getDefaultInstance()) return this;
        if (other.hasEstimatedCount()) {
          setEstimatedCount(other.getEstimatedCount());
        }
        if (other.hasEstimatedCapacity()) {
          setEstimatedCapacity(other.getEstimatedCapacity());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int estimatedCount_ ;
      /**
       * <code>optional int32 estimated_count = 1;</code>
       *
       * <pre>
       * raw count of passengers onboard vehicle
       * </pre>
       */
      public boolean hasEstimatedCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 estimated_count = 1;</code>
       *
       * <pre>
       * raw count of passengers onboard vehicle
       * </pre>
       */
      public int getEstimatedCount() {
        return estimatedCount_;
      }
      /**
       * <code>optional int32 estimated_count = 1;</code>
       *
       * <pre>
       * raw count of passengers onboard vehicle
       * </pre>
       */
      public Builder setEstimatedCount(int value) {
        bitField0_ |= 0x00000001;
        estimatedCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 estimated_count = 1;</code>
       *
       * <pre>
       * raw count of passengers onboard vehicle
       * </pre>
       */
      public Builder clearEstimatedCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        estimatedCount_ = 0;
        onChanged();
        return this;
      }

      private int estimatedCapacity_ ;
      /**
       * <code>optional int32 estimated_capacity = 2;</code>
       *
       * <pre>
       * estimated capacity of vehicle considering current
       * crowding restrictions
       * </pre>
       */
      public boolean hasEstimatedCapacity() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 estimated_capacity = 2;</code>
       *
       * <pre>
       * estimated capacity of vehicle considering current
       * crowding restrictions
       * </pre>
       */
      public int getEstimatedCapacity() {
        return estimatedCapacity_;
      }
      /**
       * <code>optional int32 estimated_capacity = 2;</code>
       *
       * <pre>
       * estimated capacity of vehicle considering current
       * crowding restrictions
       * </pre>
       */
      public Builder setEstimatedCapacity(int value) {
        bitField0_ |= 0x00000002;
        estimatedCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 estimated_capacity = 2;</code>
       *
       * <pre>
       * estimated capacity of vehicle considering current
       * crowding restrictions
       * </pre>
       */
      public Builder clearEstimatedCapacity() {
        bitField0_ = (bitField0_ & ~0x00000002);
        estimatedCapacity_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:transit_realtime.CrowdingDescriptor)
    }

    static {
      defaultInstance = new CrowdingDescriptor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.CrowdingDescriptor)
  }

  public static final int CROWDING_DESCRIPTOR_FIELD_NUMBER = 1006;
  /**
   * <code>extend .transit_realtime.VehiclePosition { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.transit.realtime.GtfsRealtime.VehiclePosition,
      com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor> crowdingDescriptor = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.class,
        com.google.transit.realtime.GtfsRealtimeCrowding.CrowdingDescriptor.getDefaultInstance());
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_transit_realtime_CrowdingDescriptor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_transit_realtime_CrowdingDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n8com/google/transit/realtime/gtfs-realt" +
      "ime-crowding.proto\022\020transit_realtime\032/co" +
      "m/google/transit/realtime/gtfs-realtime." +
      "proto\"I\n\022CrowdingDescriptor\022\027\n\017estimated" +
      "_count\030\001 \001(\005\022\032\n\022estimated_capacity\030\002 \001(\005" +
      ":e\n\023crowding_descriptor\022!.transit_realti" +
      "me.VehiclePosition\030\356\007 \001(\0132$.transit_real" +
      "time.CrowdingDescriptorB\035\n\033com.google.tr" +
      "ansit.realtime"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.transit.realtime.GtfsRealtime.getDescriptor(),
        }, assigner);
    internal_static_transit_realtime_CrowdingDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_transit_realtime_CrowdingDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_transit_realtime_CrowdingDescriptor_descriptor,
        new java.lang.String[] { "EstimatedCount", "EstimatedCapacity", });
    crowdingDescriptor.internalInit(descriptor.getExtensions().get(0));
    com.google.transit.realtime.GtfsRealtime.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
