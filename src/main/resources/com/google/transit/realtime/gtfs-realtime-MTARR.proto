syntax = "proto2";

import "com/google/transit/realtime/gtfs-realtime.proto";

option java_package = "com.google.transit.realtime";
package transit_realtime;

message MtaRailroadStopTimeUpdate {
    optional string track = 1;
    optional string trainStatus = 2;
}

extend transit_realtime.TripUpdate.StopTimeUpdate {
   optional MtaRailroadStopTimeUpdate mta_railroad_stop_time_update = 1005;
}

  message CarriageDescriptor {
    // Internal system identification of the carriage. Should be unique per
    // vehicle, and can be used for tracking the carriage as it proceeds through
    // the system.
    optional string id = 1;

    // User visible label that may be shown to the passenger to help identify
    // the carriage.
    optional string label = 2;

    // Identifies the order of this carriage with respect to the other
    // carriages in the vehicle's list of CarriageDescriptors. The values must
    // be non-negative, and there cannot be duplicate values in the list of
    // CarriageDescriptors. The values must be set such that the lowest value
    // corresponds to the first carriage in the direction of travel, the
    // second-lowest value corresponds to the second carriage in the direction
    // of travel and so forth. For example, the first carriage in the direction
    // of travel could have a carriage_sequence of 4, the second carriage could
    // have a carriage_sequence of 10, the third carriage could have a
    // carriage_sequence of 105, and so forth.
    optional int32 carriage_sequence = 3;

// The degree of passenger occupancy of the vehicle. This field is still
  // experimental, and subject to change. It may be formally adopted in the
  // future.
  enum OccupancyStatus {
    // The vehicle is considered empty by most measures, and has few or no
    // passengers onboard, but is still accepting passengers.
    EMPTY = 0;

    // The vehicle has a relatively large percentage of seats available.
    // What percentage of free seats out of the total seats available is to be
    // considered large enough to fall into this category is determined at the
    // discretion of the producer.
    MANY_SEATS_AVAILABLE = 1;

    // The vehicle has a relatively small percentage of seats available.
    // What percentage of free seats out of the total seats available is to be
    // considered small enough to fall into this category is determined at the
    // discretion of the feed producer.
    FEW_SEATS_AVAILABLE = 2;

    // The vehicle can currently accommodate only standing passengers.
    STANDING_ROOM_ONLY = 3;

    // The vehicle can currently accommodate only standing passengers
    // and has limited space for them.
    CRUSHED_STANDING_ROOM_ONLY = 4;

    // The vehicle is considered full by most measures, but may still be
    // allowing passengers to board.
    FULL = 5;

    // The vehicle is not accepting additional passengers.
    NOT_ACCEPTING_PASSENGERS = 6;

  }
    // The degree of passenger occupancy of the carriage.
    optional OccupancyStatus occupancy_status = 4;

    // Whether the carriage is wheelchair accessible.
    enum WheelchairAccessible {
      // It is unknown if the carriage is wheelchair accessible. This is the
      // default case.
      UNKNOWN_ACCESSIBILITY = 0;

      // The carriage is wheelchair accessible.
      WHEELCHAIR_ACCESSIBLE = 1;

      // The carriage is not wheelchair accessible.
      NOT_WHEELCHAIR_ACCESSIBLE = 2;
    }

    optional WheelchairAccessible wheelchair_accessible = 5 [default = UNKNOWN_ACCESSIBILITY];

    // Whether the carriage has toilet facilities onboard.
    enum ToiletFacilities {
      // It is unknown if the carriage has toilet facilities. This is the
      // default case.
      UNKNOWN_TOILET_FACILITIES = 0;

      // The carriage has toilet facilities onboard.
      TOILET_ONBOARD = 1;

      // The carriage does not have toilet facilities onboard.
      NO_TOILET_ONBOARD = 2;
    }

    optional ToiletFacilities toilet_facilities = 6 [default = UNKNOWN_TOILET_FACILITIES];

    // Whether the carriage has WiFi onboard.
    enum WifiAvailability {
      // It is unknown if the carriage has WiFi. This is the default case.
      UNKNOWN_WIFI_AVAILABILITY = 0;

      // The carriage has free WiFi available for passengers to use.
      FREE_WIFI = 1;

      // The carriage has WiFi available for passengers to purchase.
      PAID_WIFI = 2;

      // The carriage has no WiFi available for passengers to use.
      NO_WIFI = 3;
    }

    optional WifiAvailability wifi_availability = 7 [default = UNKNOWN_WIFI_AVAILABILITY];

    // Whether the carriage is air conditioned.
    enum AirConditioning {
      // It is unknown if the carriage is air conditioned. This is the default
      // case.
      UNKNOWN_AIRCONDITIONING = 0;

      // The carriage has air conditioning.
      AIR_CONDITIONED = 1;

      // The carriage does not have air conditioning.
      NOT_AIR_CONDITIONED = 2;
    }

    optional AirConditioning air_conditioning = 8 [default = UNKNOWN_AIRCONDITIONING];

    // Whether bicycles are allowed in the carriage.
    enum BicyclesAllowed {
      // It is unknown if the carriage allows bicycles. This is the default
      // case.
      UNKNOWN_BICYCLES_ALLOWED = 0;

      // Bicycles are allowed to be transported, but must be stored outside of
      // the carriage.
      ALLOWED_OUTSIDE_CARRIAGE = 1;

      // Bicycles are allowed to be transported, and can be stored inside the
      // carriage.
      ALLOWED_INSIDE_CARRIAGE = 2;

      // Bicycles are not allowed to be transported in this carriage.
      NOT_ALLOWED = 3;
    }

    optional BicyclesAllowed bicycles_allowed = 9 [default = UNKNOWN_BICYCLES_ALLOWED];

  }

 extend transit_realtime.VehiclePosition.VehicleDescriptor {
   repeated CarriageDescriptor carriage_descriptor = 1005;
}