syntax = "proto2";

import "com/google/transit/realtime/gtfs-realtime.proto";

option java_package = "com.google.transit.realtime";
package transit_realtime;

message MtaRailroadStopTimeUpdate {
    optional string track = 1;
    optional string trainStatus = 2;
}

extend transit_realtime.TripUpdate.StopTimeUpdate {
   optional MtaRailroadStopTimeUpdate mta_railroad_stop_time_update = 1005;
}

message CarriageDescriptor {
    // Internal system identification of the carriage. Should be unique per
    // vehicle, and can be used for tracking the carriage as it proceeds through
    // the system.
    optional string id = 1;

    // User visible label that may be shown to the passenger to help identify
    // the carriage.
    optional string label = 2;

    // Identifies the order of this carriage with respect to the other
    // carriages in the vehicle's list of CarriageDescriptors. The values must
    // be non-negative, and there cannot be duplicate values in the list of
    // CarriageDescriptors. The values must be set such that the lowest value
    // corresponds to the first carriage in the direction of travel, the
    // second-lowest value corresponds to the second carriage in the direction
    // of travel and so forth. For example, the first carriage in the direction
    // of travel could have a carriage_sequence of 4, the second carriage could
    // have a carriage_sequence of 10, the third carriage could have a
    // carriage_sequence of 105, and so forth.
    optional int32 carriage_sequence = 3;

  // The degree of passenger occupancy of the vehicle. This field is still
  // experimental, and subject to change. It may be formally adopted in the
  // future.
enum OccupancyStatus {
    // The vehicle is considered empty by most measures, and has few or no
    // passengers onboard, but is still accepting passengers.
    EMPTY = 0;

    // The vehicle has a relatively large percentage of seats available.
    // What percentage of free seats out of the total seats available is to be
    // considered large enough to fall into this category is determined at the
    // discretion of the producer.
    MANY_SEATS_AVAILABLE = 1;

    // The vehicle has a relatively small percentage of seats available.
    // What percentage of free seats out of the total seats available is to be
    // considered small enough to fall into this category is determined at the
    // discretion of the feed producer.
    FEW_SEATS_AVAILABLE = 2;

    // The vehicle can currently accommodate only standing passengers.
    STANDING_ROOM_ONLY = 3;

    // The vehicle can currently accommodate only standing passengers
    // and has limited space for them.
    CRUSHED_STANDING_ROOM_ONLY = 4;

    // The vehicle is considered full by most measures, but may still be
    // allowing passengers to board.
    FULL = 5;

    // The vehicle is not accepting additional passengers.
    NOT_ACCEPTING_PASSENGERS = 6;
  }

    // The degree of passenger occupancy of the carriage.
    optional OccupancyStatus occupancy_status = 4;

    //Indicates the number of bikes permitted per carriage.
    //0=bikes prohibited, -1=No limit.
    optional int32 bicycles_allowed = 5 [default = 0];

    //A description of the carriage type/model.
    optional string carriage_class = 6;

    // Whether the carriage has toilet facilities onboard.
    enum QuietCarriage {

      // It is unknown if the carriage is designated as a quiet carriage.
      //  This is the default case.
      UNKNOWN_QUIET_CARRIAGE = 0;

      // The carriage is designated a quiet carriage.
      QUIET_CARRIAGE = 1;

      // The carriage is not designated as a quiet carriage.
      NOT_QUIET_CARRIAGE = 2;
    }

    optional QuietCarriage quiet_carriage = 7 [default = UNKONWN_QUIET_CARRIAGE];

    // Whether the carriage has toilet facilities onboard.
    enum ToiletFacilities {

      // It is unknown if the carriage has toilet facilities. This is the
      // default case.
      UNKNOWN_TOILET_FACILITIES = 0;

      // The carriage has toilet facilities onboard.
      TOILET_ONBOARD = 1;

      // The carriage does not have toilet facilities onboard.
      NO_TOILET_ONBOARD = 2;
    }

    optional ToiletFacilities toilet_facilities = 8 [default = UNKNOWN_TOILET_FACILITIES];

}

extend transit_realtime.VehicleDescriptor {
    repeated CarriageDescriptor carriage_descriptor = 1005;
}